
Java Design patterns

1) Creational Pattern
		1. Facttory pattern : In factory pattern we dont expose the creation logic to the client and refer the created object using a standard object.
			A factory pattern also known as virtual constructor.
			
			Steps..
			a) creat a main class which call factory class.
			b) factory class retutrns required class instance.
			
		2. Abstact Factory : 
			This factory is also called as a factory of factories.
			Abstact factory let a class returns factory of class.
			So this is the reason abstract factory pattern is one level higher than factory pattern.
			
			Steps.
			a) Create a main class which call factory of factory class.
			b) factory of factory / factory producer create 
			c) factory class retutrns required class instance.
			
		3. Sigelton Design Pattern : (This is eager loading)
			a) This ppaterns involve a single class which is responsible to create an object while making sure that only single object gets created.
			b) This class provodes a way to access its only object which can be access directly without needs to instatiate the class.
			
			Steps.
			1. create singleton class having private static object.
			2. create private constructor.
			3. create only getter method which returns the instance of the class.
			
			ex. 
			
			class SigletonClass{
				// we make this object as static because it should get memory only one time while class loading
				private static SigletonClass instance = new SigletonClass();
				
				private SigletonClass(){
				}
				
				public static SigletonClass getInstance(){
				retutrn instance;
				}
			}
			
		4. Builder Pattern :
			
		